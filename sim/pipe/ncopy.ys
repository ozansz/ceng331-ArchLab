#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
	xorq %rax, %rax				# count = 0
	irmovq $1, %rbx				# constant 1
	iaddq $-10, %rdx			# test if len < 10
	jl tabler
loop10:
	mrmovq     (%rdi), %r8
	mrmovq 0x08(%rdi), %r9
	mrmovq 0x10(%rdi), %r10
	mrmovq 0x18(%rdi), %r11
	mrmovq 0x20(%rdi), %r12
	mrmovq 0x28(%rdi), %r13
	mrmovq 0x30(%rdi), %r14
	mrmovq 0x38(%rdi), %rbp
	mrmovq 0x40(%rdi), %rcx
	
	rmmovq %r8,     (%rsi)
	rmmovq %r9,  0x08(%rsi)
	rmmovq %r10, 0x10(%rsi)
	rmmovq %r11, 0x18(%rsi)
	rmmovq %r12, 0x20(%rsi)
	rmmovq %r13, 0x28(%rsi)
	rmmovq %r14, 0x30(%rsi)
	rmmovq %rbp, 0x38(%rsi)
	rmmovq %rcx, 0x40(%rsi)
	
	andq %r8, %r8
	jle loop10inc1
	addq %rbx, %rax
loop10inc1:
	andq %r9, %r9
	jle loop10inc2
	addq %rbx, %rax
loop10inc2:
	mrmovq 0x48(%rdi), %r8
	andq %r10, %r10
	jle loop10inc3
	addq %rbx, %rax
loop10inc3:
	rmmovq %r8, 0x48(%rsi)
	andq %r11, %r11
	jle loop10inc4
	addq %rbx, %rax
loop10inc4:
	andq %r12, %r12
	jle loop10inc5
	addq %rbx, %rax
loop10inc5:
	andq %r13, %r13
	jle loop10inc6
	addq %rbx, %rax
loop10inc6:
	andq %r14, %r14
	jle loop10inc7
	addq %rbx, %rax
loop10inc7:
	andq %rbp, %rbp
	jle loop10inc8
	addq %rbx, %rax
loop10inc8:
	andq %rcx, %rcx
	jle loop10inc9
	addq %rbx, %rax
loop10inc9:
	andq %r8, %r8
	jle loop10pro
	addq %rbx, %rax
loop10pro:
	iaddq $80, %rdi
	iaddq $80, %rsi
	iaddq $-10, %rdx
	jge loop10
tabler:
	iaddq $10, %rdx
	addq %rdx, %rdx
	addq %rdx, %rdx
	addq %rdx, %rdx
	mrmovq (%rdi), %r13
	mrmovq jumptable(%rdx), %rcx
	mrmovq 0x08(%rdi), %r14
	pushq %rcx
	ret

jumptable:
	.quad Done
	.quad loop1
	.quad loop2
	.quad loop3
	.quad loop4
	.quad loop5
	.quad loop6
	.quad loop7
	.quad loop8
	.quad loop9

loop9:
	mrmovq 0x40(%rdi), %r10
	mrmovq 0x38(%rdi), %r11
	rmmovq %r10, 0x40(%rsi) 
	andq %r10, %r10
	jle loop8actual
	addq %rbx, %rax
loop8:
	mrmovq 0x38(%rdi), %r11
loop8actual:
	mrmovq 0x30(%rdi), %r10
	rmmovq %r11, 0x38(%rsi) 
	andq %r11, %r11
	jle loop7actual
	addq %rbx, %rax
loop7:
	mrmovq 0x30(%rdi), %r10
loop7actual:
	mrmovq 0x28(%rdi), %r11
	rmmovq %r10, 0x30(%rsi) 
	andq %r10, %r10
	jle loop6actual
	addq %rbx, %rax
loop6:
	mrmovq 0x28(%rdi), %r11
loop6actual:
	mrmovq 0x20(%rdi), %r10
	rmmovq %r11, 0x28(%rsi) 
	andq %r11, %r11
	jle loop5actual
	addq %rbx, %rax
loop5:
	mrmovq 0x20(%rdi), %r10
loop5actual:
	mrmovq 0x18(%rdi), %r11
	rmmovq %r10, 0x20(%rsi) 
	andq %r10, %r10
	jle loop4actual
	addq %rbx, %rax
loop4:
	mrmovq 0x18(%rdi), %r11
loop4actual:
	mrmovq 0x10(%rdi), %r10
	rmmovq %r11, 0x18(%rsi) 
	andq %r11, %r11
	jle loop3actual
	addq %rbx, %rax
loop3:
	mrmovq 0x10(%rdi), %r10
loop3actual:
	rmmovq %r10, 0x10(%rsi) 
	andq %r10, %r10
	jle loop2
	addq %rbx, %rax
loop2:
	rmmovq %r14, 0x8(%rsi) 
	andq %r14, %r14
	jle loop1
	addq %rbx, %rax
loop1:
	rmmovq %r13, (%rsi) 
	andq %r13, %r13
	jle Done
	addq %rbx, %rax
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
