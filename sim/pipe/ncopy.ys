#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Ozan Sazak
# 2310456
# 
# 1. Implemented Duff's Device (https://en.wikipedia.org/wiki/Duff%27s_device) with 10x loop unrolling (More than 10 was passing the 1000 byte size limits).
# 2. Separated mrmovq and rmmovq instructions that using same registers to prevent data hazards.
# 3. My Duff's Device implementation first does the bulk unroll part and then the remainder part. This way i've decreased the CPI of my code.
# 4. Used a jump table to jump to the accurate remainder part. This is calculated at the "tabler" tag, and then pushes the address to the stack and uses ret instruction to simulate jmpq.
# 5. Preloading the next remainder's memory data in the one before to cope with data hazards. Also loading loop1 and loop2's data in remainder calculation to prevent any further data hazard.
# 6. Used iaddq instead of addq but then it caused my code to pass the 1000 byte size limit. Then allocated %rbx as constant 1 and used it to increment %rax by one (value > 0), this way my code size decreased to ~940 bytes
# 7. Tried to change the value > 0 tests with bit-hacking to decrease jumps and extra bubbles bu it didn't work.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
	xorq %rax, %rax				# count = 0
	irmovq $1, %rbx				# constant 1
	iaddq $-10, %rdx			# test if len < 10
	jl tabler
loop10:
	mrmovq     (%rdi), %r8
	mrmovq 0x08(%rdi), %r9
	mrmovq 0x10(%rdi), %r10
	mrmovq 0x18(%rdi), %r11
	mrmovq 0x20(%rdi), %r12
	mrmovq 0x28(%rdi), %r13
	mrmovq 0x30(%rdi), %r14
	mrmovq 0x38(%rdi), %rbp
	mrmovq 0x40(%rdi), %rcx
	
	rmmovq %r8,     (%rsi)
	rmmovq %r9,  0x08(%rsi)
	rmmovq %r10, 0x10(%rsi)
	rmmovq %r11, 0x18(%rsi)
	rmmovq %r12, 0x20(%rsi)
	rmmovq %r13, 0x28(%rsi)
	rmmovq %r14, 0x30(%rsi)
	rmmovq %rbp, 0x38(%rsi)
	rmmovq %rcx, 0x40(%rsi)
	
	andq %r8, %r8
	jle loop10inc1
	addq %rbx, %rax
loop10inc1:
	andq %r9, %r9
	jle loop10inc2
	addq %rbx, %rax
loop10inc2:
	mrmovq 0x48(%rdi), %r8
	andq %r10, %r10
	jle loop10inc3
	addq %rbx, %rax
loop10inc3:
	rmmovq %r8, 0x48(%rsi)
	andq %r11, %r11
	jle loop10inc4
	addq %rbx, %rax
loop10inc4:
	andq %r12, %r12
	jle loop10inc5
	addq %rbx, %rax
loop10inc5:
	andq %r13, %r13
	jle loop10inc6
	addq %rbx, %rax
loop10inc6:
	andq %r14, %r14
	jle loop10inc7
	addq %rbx, %rax
loop10inc7:
	andq %rbp, %rbp
	jle loop10inc8
	addq %rbx, %rax
loop10inc8:
	andq %rcx, %rcx
	jle loop10inc9
	addq %rbx, %rax
loop10inc9:
	andq %r8, %r8
	jle loop10pro
	addq %rbx, %rax
loop10pro:
	iaddq $80, %rdi
	iaddq $80, %rsi
	iaddq $-10, %rdx
	jge loop10
tabler:
	addq %rdx, %rdx
	addq %rdx, %rdx
	addq %rdx, %rdx
	mrmovq (%rdi), %r13
	mrmovq jumptable(%rdx), %rcx
	mrmovq 0x08(%rdi), %r14
	pushq %rcx
	ret

	.quad Done
	.quad loop1
	.quad loop2
	.quad loop3
	.quad loop4
	.quad loop5
	.quad loop6
	.quad loop7
	.quad loop8
	.quad loop9
jumptable:
	

loop9:
	mrmovq 0x40(%rdi), %r8
	mrmovq 0x38(%rdi), %r9
	andq %r8, %r8
	rmmovq %r8, 0x40(%rsi) 
	jle loop8actual
	addq %rbx, %rax
loop8:
	mrmovq 0x38(%rdi), %r9
loop8actual:
	mrmovq 0x30(%rdi), %r8
	andq %r9, %r9
	rmmovq %r9, 0x38(%rsi) 
	jle loop7actual
	addq %rbx, %rax
loop7:
	mrmovq 0x30(%rdi), %r8
loop7actual:
	mrmovq 0x28(%rdi), %r9
	andq %r8, %r8
	rmmovq %r8, 0x30(%rsi) 
	jle loop6actual
	addq %rbx, %rax
loop6:
	mrmovq 0x28(%rdi), %r9
loop6actual:
	mrmovq 0x20(%rdi), %r8
	andq %r9, %r9
	rmmovq %r9, 0x28(%rsi) 
	jle loop5actual
	addq %rbx, %rax
loop5:
	mrmovq 0x20(%rdi), %r8
loop5actual:
	mrmovq 0x18(%rdi), %r9
	andq %r8, %r8
	rmmovq %r8, 0x20(%rsi) 
	jle loop4actual
	addq %rbx, %rax
loop4:
	mrmovq 0x18(%rdi), %r9
loop4actual:
	mrmovq 0x10(%rdi), %r8
	andq %r9, %r9
	rmmovq %r9, 0x18(%rsi) 
	jle loop3actual
	addq %rbx, %rax
loop3:
	mrmovq 0x10(%rdi), %r8
loop3actual:
	andq %r8, %r8
	rmmovq %r8, 0x10(%rsi) 
	jle loop2
	addq %rbx, %rax
loop2:
	andq %r14, %r14
	rmmovq %r14, 0x8(%rsi) 
	jle loop1
	addq %rbx, %rax
loop1:
	andq %r13, %r13
	rmmovq %r13, (%rsi) 
	jle Done
	addq %rbx, %rax
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
